using System;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using LinkManagerApp.Controls;
using LinkManagerApp.Models;
using LinkManagerApp.Services;
using LinkManagerApp.Utilities;

namespace LinkManagerApp.Forms
{
    public partial class DownloadForm : Form
    {
        private readonly DownloadService _downloadService;
        private readonly LinkService _linkService;
        private readonly string _userName;
        private ProgressPanel _progressPanel;

        public DownloadForm(DownloadService downloadService, LinkService linkService, string userName)
        {
            _downloadService = downloadService;
            _linkService = linkService;
            _userName = userName;
            InitializeComponent();
            InitializeForm();
        }

        private void InitializeForm()
        {
            Text = "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞";
            Size = new Size(600, 400);
            UIHelper.SetDefaultFormStyle(this);

            var titleLabel = new Label
            {
                Text = "üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê",
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                Location = new Point(20, 20),
                Size = new Size(560, 30),
                TextAlign = ContentAlignment.MiddleCenter,
                ForeColor = Color.FromArgb(0, 123, 255)
            };

            var urlLabel = new Label
            {
                Text = "URL —Ñ–∞–π–ª–∞:",
                Location = new Point(20, 70),
                Size = new Size(100, 20)
            };

            var urlTextBox = UIHelper.CreateTextBox("https://example.com/file.zip");
            urlTextBox.Location = new Point(130, 70);
            urlTextBox.Size = new Size(430, 30);

            var fileNameLabel = new Label
            {
                Text = "–ò–º—è —Ñ–∞–π–ª–∞:",
                Location = new Point(20, 110),
                Size = new Size(100, 20)
            };

            var fileNameTextBox = UIHelper.CreateTextBox("downloaded_file");
            fileNameTextBox.Location = new Point(130, 110);
            fileNameTextBox.Size = new Size(430, 30);

            // –ü–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            _progressPanel = new ProgressPanel
            {
                Location = new Point(20, 160),
                Visible = false
            };

            var downloadButton = UIHelper.CreateButton("üì• –°–∫–∞—á–∞—Ç—å", 150, 40);
            downloadButton.Location = new Point(150, 280);
            downloadButton.Click += async (s, e) =>
            {
                await StartDownload(urlTextBox.Text, fileNameTextBox.Text);
            };

            var cancelButton = UIHelper.CreateButton("–û—Ç–º–µ–Ω–∞", 150, 40);
            cancelButton.Location = new Point(320, 280);
            cancelButton.Click += (s, e) => Close();

            // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            var savedLinks = _linkService.LoadUserLinks(_userName)
                .Where(link => !string.IsNullOrEmpty(link.Url))
                .Take(5)
                .ToList();

            if (savedLinks.Count > 0)
            {
                var linksLabel = new Label
                {
                    Text = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:",
                    Location = new Point(20, 330),
                    Size = new Size(200, 20),
                    Font = new Font("Segoe UI", 9, FontStyle.Bold)
                };

                var linksComboBox = new ComboBox
                {
                    Location = new Point(180, 330),
                    Size = new Size(380, 30),
                    DropDownStyle = ComboBoxStyle.DropDownList
                };

                linksComboBox.Items.AddRange(savedLinks.ToArray());
                linksComboBox.DisplayMember = "Title";
                linksComboBox.SelectedIndexChanged += (s, e) =>
                {
                    if (linksComboBox.SelectedItem is UserLink selectedLink)
                    {
                        urlTextBox.Text = selectedLink.Url;
                        fileNameTextBox.Text = selectedLink.Title;
                    }
                };

                Controls.Add(linksLabel);
                Controls.Add(linksComboBox);
            }

            Controls.AddRange(new Control[] { titleLabel, urlLabel, urlTextBox, 
                fileNameLabel, fileNameTextBox, _progressPanel, downloadButton, cancelButton });
        }

        private async Task StartDownload(string url, string fileName)
        {
            if (string.IsNullOrEmpty(url))
            {
                MessageBox.Show("URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (string.IsNullOrEmpty(fileName))
            {
                fileName = $"downloaded_file_{DateTime.Now:yyyyMMdd_HHmmss}";
            }

            _progressPanel.Visible = true;
            _progressPanel.UpdateProgress(0, "–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...");

            try
            {
                var progress = new Progress<(double percentage, long current, long total)>(value =>
                {
                    _progressPanel.UpdateProgress(value.percentage, 
                        $"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {FileHelper.FormatFileSize(value.current)} / {FileHelper.FormatFileSize(value.total)}");
                });

                var filePath = await _downloadService.DownloadFileAsync(url, fileName, progress);
                
                _progressPanel.UpdateProgress(100, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

                var fileInfo = new FileInfo(filePath);
                if (fileInfo.Exists && fileInfo.Length > 0)
                {
                    MessageBox.Show($"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!\n\nüìç –ü—É—Ç—å: {filePath}\nüìä –†–∞–∑–º–µ—Ä: {FileHelper.FormatFileSize(fileInfo.Length)}", 
                        "–£—Å–ø–µ—Ö", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
                    if (MessageBox.Show("–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏", 
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        var newLink = new UserLink
                        {
                            UserName = _userName,
                            Url = url,
                            Title = fileName,
                            Category = "–ó–∞–≥—Ä—É–∑–∫–∏",
                            AddedDate = DateTime.Now
                        };

                        _linkService.SaveUserLink(newLink);
                        MessageBox.Show("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", "–£—Å–ø–µ—Ö", 
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                _progressPanel.Visible = false;
                MessageBox.Show($"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);

                // –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
                CreateAlternativeFile(fileName, url);
            }
        }

        private void CreateAlternativeFile(string fileName, string originalUrl)
        {
            try
            {
                string downloadsPath = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), 
                    "Downloads");
                
                string filePath = Path.Combine(downloadsPath, $"{fileName}_info.txt");

                string content = $"–§–∞–π–ª: {fileName}\n";
                content += $"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: {originalUrl}\n";
                content += $"–î–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n";
                content += new string('‚ïê', 60) + "\n";
                content += "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n";
                content += "üîí –°–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n";
                content += "üí° –†–µ—à–µ–Ω–∏–µ: –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é\n";

                File.WriteAllText(filePath, content);
                
                MessageBox.Show($"–°–æ–∑–¥–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filePath}", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            }
        }
    }
}